{"remainingRequest":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/components/TodoForm.vue?vue&type=style&index=0&id=09eb515a&scoped=true&lang=css&","dependencies":[{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/components/TodoForm.vue","mtime":1560763487994},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.todo-form {\n  display: flex;\n  margin: 24px;\n  margin-bottom: 32px;\n  justify-content: center;\n}\n.todo-item {\n  margin: 16px 0;\n  padding: 8px;\n  padding-left: 16px;\n  background-color: #42b983;\n  border-radius: 8px;\n  color: white;\n  justify: left;\n}\n.form-label {\n  margin-right: 16px;\n}\n\n\n.form-input {\n  display: block;\n  margin: 8px 0;\n  padding: 8px;\n  border-radius: 3px;\n  border: 0.5px solid rgba(0, 0, 0, 0.15);\n}\n\n.form-input:focus {\n  border: 0.5px solid #42b983;\n  outline: 0;\n  box-shadow: none;\n}\n\n.todo-form-btn {\n  /* clear button styling */\n  background: none;\n  outline: none;\n  border: none;\n  padding: 0;\n\n  /* custom styling */\n  background-color: white;\n  border: 1px solid #42b983;\n  margin-left: 8px;\n  margin-bottom: 8px;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: #42b983;\n  font-size: 1.2em;\n  /* font-weight: bold; */\n  align-self: flex-end;\n}\n\n.cancel-button {\n  font-size: 0.83em;\n}\n\ntodo-form-btn:active {\n  background-color: #42b983;\n  color: white;\n}\n",{"version":3,"sources":["TodoForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"TodoForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n  <b-container class=\"todo-form\">\n    <b-row>\n            <ul v-for=\"(course_question_paper, index) in this.course_question_paper\" :key=\"index\" @click=\"selectCourse_Question_Paper(course_question_paper)\">\n            <li class=\"todo-item\">{{course_question_paper.course}} &nbsp;&nbsp;&nbsp;{{course_question_paper.question_paper}} </li> \n            </ul>\n    </b-row>\n\n    <b-row v-if=\"this.isSelectedQuestionPaper===true\">\n            Questions</br>\n            <ul v-for=\"(question, index) in this.questions\" :key=\"index\" @click=\"selectQuestion(question)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp;{{question.summary}} </li> \n            </ul>\n    </b-row>\n    \n    <b-row>\n      <form @submit.prevent=\"submit\">         \n          <div v-if=\"this.isSelectedQuestion===true\"> {{this.selectedQuestionData.summary}} </div>\n          <div v-if=\"this.isSelectedQuestion===true\" v-html=\"this.selectedQuestionData.description\"> </div>\n          <div v-if=\"this.isSelectedQuestion===true\">Language : {{this.selectedQuestionData.language}} \n          <textarea v-model=\"answer\" placeholder=\"write code here..\" rows=\"10\"></textarea>\n          <button type=\"submit\">\n              Submit\n          </button>\n          </div>\n      </form>\n    </b-row>\n\n      <b-row v-if=\"this.isSubmitted===true\">\n        <form @submit.prevent=\"validate\">\n              <button type=\"submit\">\n                  Validate\n              </button>\n              {{this.tornadoServerMessage}}\n        </form>\n      </b-row>\n  </b-container> \n\n<!--<div v-if=\"this.isSelected===true\"> {{this.selectedQuizData}} </div>-->\n</div>\n\n</template>\n\n<script>\n\n\nimport axios from 'axios'\nlet base64 = require('base-64');\nlet username = 'hello';\nlet password = 'hello';\nlet url_quizzes = \"http://127.0.0.1:8000/api/quizzes/\"\nlet url_post = \"http://127.0.0.1:8000/api/answerpapers/\"\nlet url_validate = \"http://127.0.0.1:8000/api/validate/\"\nlet url_questions = \"http://127.0.0.1:8000/api/questions/\"\nlet headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\nheaders.set('Accept', 'application/json');\nheaders.set('Content-Type', 'application/json');\n\nexport default {\n  name: 'TodoForm',\n  props: {\n      course_question_paper: {\n      type: Object\n    }\n  },\n\n  data () {\n    return {\n      questions: [],\n      postData: [],\n      selectedQuestionData: null,\n      selectedQuizData: null,\n      isSelectedQuestion: false,\n      isSelectedQuiz: false,\n      answer: \"\",\n      testdata:\"\",\n      quizzes: [],\n      course_id: \"\",\n      question_paper_id: \"\",\n      attempt_no: \"\",\n      course_question_paper: [],\n      answer_paper_id: \"\",\n      isSelectedQuestionPaper: false,\n      user_id: \"\",\n      tornadoServerMessage: \"\",\n      isSubmitted: \"\",\n    }\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n\n  selectQuestion(selectedQuestionData){\n    this.selectedQuestionData = selectedQuestionData; \n    this.isSelectedQuestion = true;\n    },\n\n  submit(){\n      this.tornadoServerMessage = \"\"\n      this.isSubmitted = true\n      fetch(url_validate.concat(this.answer_paper_id).concat(\"/\").concat(this.selectedQuestionData.id).concat(\"/\"), {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\"answer\":this.answer})\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n              this.user_id = jsonResponse.uid\n              console.log(this.user_id)\n    })\n    .catch(err => {err});\n    },\n\n\nvalidate(){\n    fetch(url_validate.concat(this.user_id).concat(\"/\"), {\n      method: \"get\",\n      headers: headers,\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n              this.tornadoServerMessage = jsonResponse\n    })\n    .catch(err => {err});\n    },\n\nonSubmit_1(){\n    fetch(url_validate.concat(\"5\").concat(\"/\").concat(\"5\").concat(\"/\"), {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\"answer\":this.answer})\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n    })\n    .catch(err => {err});\n    },\n\n  selectCourse_Question_Paper(course_question_paper){\n        this.answer_paper_id = course_question_paper.id\n        //console.log(course_question_paper.id)\n        //console.log(course_question_paper.questions_order)\n        this.isSelectedQuestionPaper = true\n        this.questions = []\n        fetch(url_questions, {\n            method: 'get',\n            headers: headers,\n          },)\n         .then((response) => {\n            console.log(response)\n            return response.json()\n          })\n         .then((jsonData) => {\n            //console.log(jsonData)\n            this.questions = jsonData\n            // sort according to the question order\n            for(question_id in course_question_paper.questions_order)\n            {\n              for(data in jsonData)\n              {   \n                  console.log(question_id)\n                  console.log(data.id)\n                  if(data.id===question_id)\n                  {\n                      this.questions.push(data)\n                  }\n              }\n            }\n            console.log(this.questions)\n        })\n    }\n  },\n\n\n/**\nfetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      //this.questions = jsonData \n      console.log(jsonData)\n      //this.$emit('submit', this.questions)\n    })\n**/\n  \n  created () {\n    if(this.isSelected===true)\n    {\n      this.currentQuestion = this.selectedQuestionData\n    }\n  },\n\n  mounted: function(){\n    fetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      console.log(jsonData)\n      this.course_question_paper = jsonData\n      this.$emit('submit', this.course_question_paper)\n    })\n  }\n}\n</script>\n\n<style scoped>\n.todo-form {\n  display: flex;\n  margin: 24px;\n  margin-bottom: 32px;\n  justify-content: center;\n}\n.todo-item {\n  margin: 16px 0;\n  padding: 8px;\n  padding-left: 16px;\n  background-color: #42b983;\n  border-radius: 8px;\n  color: white;\n  justify: left;\n}\n.form-label {\n  margin-right: 16px;\n}\n\n\n.form-input {\n  display: block;\n  margin: 8px 0;\n  padding: 8px;\n  border-radius: 3px;\n  border: 0.5px solid rgba(0, 0, 0, 0.15);\n}\n\n.form-input:focus {\n  border: 0.5px solid #42b983;\n  outline: 0;\n  box-shadow: none;\n}\n\n.todo-form-btn {\n  /* clear button styling */\n  background: none;\n  outline: none;\n  border: none;\n  padding: 0;\n\n  /* custom styling */\n  background-color: white;\n  border: 1px solid #42b983;\n  margin-left: 8px;\n  margin-bottom: 8px;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: #42b983;\n  font-size: 1.2em;\n  /* font-weight: bold; */\n  align-self: flex-end;\n}\n\n.cancel-button {\n  font-size: 0.83em;\n}\n\ntodo-form-btn:active {\n  background-color: #42b983;\n  color: white;\n}\n</style>\n"]}]}