{"remainingRequest":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/babel-loader/lib/index.js!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/eslint-loader/index.js??ref--13-0!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/api/indexedDBService.js","dependencies":[{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/api/indexedDBService.js","mtime":1560072980926},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { openDb } from 'idb';\n\nvar dbPromise = function dbPromise(_) {\n  if (!('indexedDB' in window)) {\n    throw new Error('Browser does not support IndexedDB');\n  }\n\n  return openDb('VueTodoDB', 1, function (upgradeDb) {\n    if (!upgradeDb.objectStoreNames.contains('todos')) {\n      upgradeDb.createObjectStore('todos');\n    }\n\n    if (!upgradeDb.objectStoreNames.contains('completed')) {\n      upgradeDb.createObjectStore('completed');\n    }\n  });\n};\n\nvar checkStorage =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(storeName) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", dbPromise().then(function (db) {\n              var tx = db.transaction(storeName, 'readonly');\n              var store = tx.objectStore(storeName);\n              return store.get(storeName);\n            }).catch(function (error) {\n              return error;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function checkStorage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar saveToStorage =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(storeName, tasks) {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", dbPromise().then(function (db) {\n              var tx = db.transaction(storeName, 'readwrite');\n              var store = tx.objectStore(storeName);\n              store.put(tasks, storeName);\n              return tx.complete;\n            }).catch(function (error) {\n              return error;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function saveToStorage(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default {\n  checkStorage: checkStorage,\n  saveToStorage: saveToStorage,\n  dbPromise: dbPromise\n};",{"version":3,"sources":["/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/api/indexedDBService.js"],"names":["openDb","dbPromise","_","window","Error","upgradeDb","objectStoreNames","contains","createObjectStore","checkStorage","storeName","then","db","tx","transaction","store","objectStore","get","catch","error","saveToStorage","tasks","put","complete"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,KAAvB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,CAAC,EAAI;AACrB,MAAI,EAAE,eAAeC,MAAjB,CAAJ,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,SAAOJ,MAAM,CAAC,WAAD,EAAc,CAAd,EAAiB,UAAAK,SAAS,EAAI;AACzC,QAAI,CAACA,SAAS,CAACC,gBAAV,CAA2BC,QAA3B,CAAoC,OAApC,CAAL,EAAmD;AACjDF,MAAAA,SAAS,CAACG,iBAAV,CAA4B,OAA5B;AACD;;AAED,QAAI,CAACH,SAAS,CAACC,gBAAV,CAA2BC,QAA3B,CAAoC,WAApC,CAAL,EAAuD;AACrDF,MAAAA,SAAS,CAACG,iBAAV,CAA4B,WAA5B;AACD;AACF,GARY,CAAb;AASD,CAdD;;AAgBA,IAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA,6CACZT,SAAS,GACbU,IADI,CACC,UAAAC,EAAE,EAAI;AACV,kBAAMC,EAAE,GAAGD,EAAE,CAACE,WAAH,CAAeJ,SAAf,EAA0B,UAA1B,CAAX;AACA,kBAAMK,KAAK,GAAGF,EAAE,CAACG,WAAH,CAAeN,SAAf,CAAd;AAEA,qBAAOK,KAAK,CAACE,GAAN,CAAUP,SAAV,CAAP;AACD,aANI,EAOJQ,KAPI,CAOE,UAAAC,KAAK,EAAI;AACd,qBAAOA,KAAP;AACD,aATI,CADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZV,YAAY;AAAA;AAAA;AAAA,GAAlB;;AAaA,IAAMW,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOV,SAAP,EAAkBW,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,8CACbpB,SAAS,GACbU,IADI,CACC,UAAAC,EAAE,EAAI;AACV,kBAAMC,EAAE,GAAGD,EAAE,CAACE,WAAH,CAAeJ,SAAf,EAA0B,WAA1B,CAAX;AACA,kBAAMK,KAAK,GAAGF,EAAE,CAACG,WAAH,CAAeN,SAAf,CAAd;AAEAK,cAAAA,KAAK,CAACO,GAAN,CAAUD,KAAV,EAAiBX,SAAjB;AAEA,qBAAOG,EAAE,CAACU,QAAV;AACD,aARI,EASJL,KATI,CASE,UAAAC,KAAK,EAAI;AACd,qBAAOA,KAAP;AACD,aAXI,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbC,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAeA,eAAe;AACbX,EAAAA,YAAY,EAAZA,YADa;AAEbW,EAAAA,aAAa,EAAbA,aAFa;AAGbnB,EAAAA,SAAS,EAATA;AAHa,CAAf","sourcesContent":["import { openDb } from 'idb'\n\nconst dbPromise = _ => {\n  if (!('indexedDB' in window)) {\n    throw new Error('Browser does not support IndexedDB')\n  }\n\n  return openDb('VueTodoDB', 1, upgradeDb => {\n    if (!upgradeDb.objectStoreNames.contains('todos')) {\n      upgradeDb.createObjectStore('todos')\n    }\n\n    if (!upgradeDb.objectStoreNames.contains('completed')) {\n      upgradeDb.createObjectStore('completed')\n    }\n  })\n}\n\nconst checkStorage = async storeName => {\n  return dbPromise()\n    .then(db => {\n      const tx = db.transaction(storeName, 'readonly')\n      const store = tx.objectStore(storeName)\n\n      return store.get(storeName)\n    })\n    .catch(error => {\n      return error\n    })\n}\n\nconst saveToStorage = async (storeName, tasks) => {\n  return dbPromise()\n    .then(db => {\n      const tx = db.transaction(storeName, 'readwrite')\n      const store = tx.objectStore(storeName)\n\n      store.put(tasks, storeName)\n\n      return tx.complete\n    })\n    .catch(error => {\n      return error\n    })\n}\n\nexport default {\n  checkStorage,\n  saveToStorage,\n  dbPromise\n}\n"]}]}