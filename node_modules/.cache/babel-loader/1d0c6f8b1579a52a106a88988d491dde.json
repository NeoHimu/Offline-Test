{"remainingRequest":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/node_modules/babel-loader/lib/index.js!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/src/components/TodoForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/src/components/TodoForm.vue","mtime":1559642581693},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/VueTodo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\n\nvar base64 = require('base-64');\n\nvar username = 'hello';\nvar password = 'hello';\nvar url_quizzes = \"http://127.0.0.1:8000/api/quizzes/\";\nvar url_post = \"http://127.0.0.1:8000/api/answerpapers/\";\nvar headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\nexport default {\n  name: 'TodoForm',\n  props: {\n    currentQuestion: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      questions: [],\n      postData: [],\n      selectedQuestionData: null,\n      selectedQuizData: null,\n      isSelectedQuestion: false,\n      isSelectedQuiz: false,\n      answer: \"\",\n      testdata: \"\",\n      quizzes: []\n    };\n  },\n  computed: {},\n  methods: {\n    selectedQuestion: function selectedQuestion(selectedQuestionData) {\n      this.selectedQuestionData = selectedQuestionData;\n      this.isSelectedQuestion = true;\n    },\n    selectedQuiz: function selectedQuiz(selectedQuizData, quiz_id) {\n      var _this = this;\n\n      this.selectedQuizData = selectedQuizData;\n      this.isSelectedQuiz = true;\n      fetch(url_quizzes.concat(quiz_id), {\n        method: 'get',\n        headers: headers\n      }).then(function (response) {\n        console.log(response);\n        return response.json();\n      }).then(function (jsonData) {\n        _this.questions = jsonData;\n        console.log(jsonData);\n\n        _this.$emit('submit', _this.questions);\n      });\n    },\n    submit: function submit() {\n      /**\n      fetch(url_post, {\n            method: 'get',\n            headers: headers,\n          },)\n          .then((response) => {\n            console.log(response)\n            return response.json()\n          })\n          .then((jsonData) => {\n            //this.questions = jsonData \n            console.log(jsonData)\n            //this.$emit('submit', this.questions)\n          })\n      **/\n      axios.post(url_post, {\n        question_paper: 1,\n        attempt_number: 1,\n        course: 1\n      }).then(function (res) {\n        console.log(res);\n      }).catch(function (err) {}); //this.selectedQuestionData.solution = this.answer\n      // replace the answer for this question and let other questions unchanged\n      //          for(que in this.postData)\n      //          {\n      //              if(que.summary === this.selectedQuestionData.summary)\n      //              {\n      //que.solution = this.answer\n      //              }\n      //         }\n      //url, data=dict(uid=uid, json_data=json_data, user_dir=user_dir)\n      //        this.testdata = {\n      //            'metadata': {\n      //               'user_answer': this.answer,\n      //              'language': 'python',\n      //             'partial_grading': \"\"\n      //        },\n      //       'test_case_data': [\n      //          {'test_case': 'assert 1==2',\n      //          'test_case_type': 'standardtestcase',\n      //         'weight': 0.0}\n      //   ]\n      //}\n    }\n  },\n  created: function created() {\n    if (this.isSelected === true) {\n      this.currentQuestion = this.selectedQuestionData;\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    fetch(url_quizzes, {\n      method: 'get',\n      headers: headers\n    }).then(function (response) {\n      console.log(response);\n      return response.json();\n    }).then(function (jsonData) {\n      _this2.quizzes = jsonData;\n      console.log(jsonData); //this.$emit('submit', this.quizzes)\n    });\n  }\n};",{"version":3,"sources":["TodoForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n  <b-container class=\"xyz\">\n    <b-row>\n          \"Examination\"\n    </b-row>\n    <b-row>\n     <b-col>\n            <ul v-for=\"(quiz, index) in this.quizzes\" :key=\"index\" @click=\"selectedQuiz(quiz, quiz.id)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp; {{quiz.description}} </li> \n            </ul>\n     </b-col>\n\n     <b-col v-if=\"this.isSelectedQuiz===true\">\n            <ul v-for=\"(q, index) in this.questions\" :key=\"index\" @click=\"selectedQuestion(q)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp; {{q.summary}} </li> \n            </ul>\n     </b-col>\n\n     <b-col>\n        <form @submit.prevent=\"submit\">         \n          <div v-if=\"this.isSelectedQuestion===true\"> {{this.selectedQuestionData.summary}} </div>\n          <div v-if=\"this.isSelectedQuestion===true\" v-html=\"this.selectedQuestionData.description\"> </div>\n          <div v-if=\"this.isSelectedQuestion===true\">Language : {{this.selectedQuestionData.language}} \n          <textarea v-model=\"answer\" placeholder=\"write code here..\" rows=\"10\"></textarea>\n          <button type=\"submit\">\n              Submit\n          </button>\n          </div>\n        </form>\n     </b-col>\n\n\n    </b-row>\n  </b-container> \n\n<!--<div v-if=\"this.isSelected===true\"> {{this.selectedQuizData}} </div>-->\n</div>\n\n</template>\n\n<script>\nimport axios from 'axios'\nlet base64 = require('base-64');\nlet username = 'hello';\nlet password = 'hello';\nlet url_quizzes = \"http://127.0.0.1:8000/api/quizzes/\"\nlet url_post = \"http://127.0.0.1:8000/api/answerpapers/\"\nlet headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password),);\n\n\nexport default {\n  name: 'TodoForm',\n  props: {\n      currentQuestion: {\n      type: Object\n    }\n  },\n\n  data () {\n    return {\n      questions: [],\n      postData: [],\n      selectedQuestionData: null,\n      selectedQuizData:null,\n      isSelectedQuestion: false,\n      isSelectedQuiz:false,\n      answer: \"\",\n      testdata:\"\",\n      quizzes: []\n    }\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n  selectedQuestion(selectedQuestionData){\n    this.selectedQuestionData = selectedQuestionData; \n    this.isSelectedQuestion = true;\n    },\n\n  selectedQuiz(selectedQuizData, quiz_id){\n    this.selectedQuizData = selectedQuizData; \n    this.isSelectedQuiz = true;\n\n    fetch(url_quizzes.concat(quiz_id), {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      this.questions = jsonData \n      console.log(jsonData)\n      this.$emit('submit', this.questions)\n    })\n  },\n\n    submit(){\n/**\nfetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      //this.questions = jsonData \n      console.log(jsonData)\n      //this.$emit('submit', this.questions)\n    })\n**/\n    axios.post(url_post, {question_paper:1, attempt_number:1, course:1}).then(res => {\n              console.log(res)\n          })\n         .catch(err => {});\n\n\n          //this.selectedQuestionData.solution = this.answer\n          // replace the answer for this question and let other questions unchanged\n//          for(que in this.postData)\n//          {\n//              if(que.summary === this.selectedQuestionData.summary)\n//              {\n                  //que.solution = this.answer\n//              }\n //         }\n//url, data=dict(uid=uid, json_data=json_data, user_dir=user_dir)\n//        this.testdata = {\n//            'metadata': {\n //               'user_answer': this.answer,\n  //              'language': 'python',\n   //             'partial_grading': \"\"\n    //        },\n     //       'test_case_data': [\n      //          {'test_case': 'assert 1==2',\n       //          'test_case_type': 'standardtestcase',\n        //         'weight': 0.0}\n         //   ]\n        //}\n      }\n  },\n  \n  created () {\n    if(this.isSelected===true)\n    {\n      this.currentQuestion = this.selectedQuestionData\n    }\n  },\n\n  mounted: function(){\n    fetch(url_quizzes, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      this.quizzes = jsonData \n      console.log(jsonData)\n      //this.$emit('submit', this.quizzes)\n    })\n  }\n}\n</script>\n\n<style scoped>\n.todo-form {\n  display: flex;\n  margin: 24px;\n  margin-bottom: 32px;\n  justify-content: center;\n}\n.todo-item {\n  margin: 16px 0;\n  padding: 8px;\n  padding-left: 16px;\n  background-color: #42b983;\n  border-radius: 8px;\n  color: white;\n  justify: left;\n}\n.form-label {\n  margin-right: 16px;\n}\n\n\n.form-input {\n  display: block;\n  margin: 8px 0;\n  padding: 8px;\n  border-radius: 3px;\n  border: 0.5px solid rgba(0, 0, 0, 0.15);\n}\n\n.form-input:focus {\n  border: 0.5px solid #42b983;\n  outline: 0;\n  box-shadow: none;\n}\n\n.todo-form-btn {\n  /* clear button styling */\n  background: none;\n  outline: none;\n  border: none;\n  padding: 0;\n\n  /* custom styling */\n  background-color: white;\n  border: 1px solid #42b983;\n  margin-left: 8px;\n  margin-bottom: 8px;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: #42b983;\n  font-size: 1.2em;\n  /* font-weight: bold; */\n  align-self: flex-end;\n}\n\n.cancel-button {\n  font-size: 0.83em;\n}\n\ntodo-form-btn:active {\n  background-color: #42b983;\n  color: white;\n}\n</style>\n"],"sourceRoot":"src/components"}]}