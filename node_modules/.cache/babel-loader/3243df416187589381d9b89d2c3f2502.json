{"remainingRequest":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/babel-loader/lib/index.js!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/components/TodoForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/components/TodoForm.vue","mtime":1560353313866},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n\n      <b-row>\n        <form @submit.prevent=\"onSubmit\">\n              <button type=\"submit\">\n                  Submit\n              </button>\n        </form>\n      </b-row>\n\n  <b-row>\n\n     <b-col v-if=\"this.isSelectedQuiz===true\">\n            <ul v-for=\"(q, index) in this.questions\" :key=\"index\" @click=\"selectedQuestion(q)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp; {{q}} </li> \n            </ul>\n     </b-col>\n\n     <b-col>\n        <form @submit.prevent=\"submit\">         \n          <div v-if=\"this.isSelectedQuestion===true\"> {{this.selectedQuestionData.summary}} </div>\n          <div v-if=\"this.isSelectedQuestion===true\" v-html=\"this.selectedQuestionData.description\"> </div>\n          <div v-if=\"this.isSelectedQuestion===true\">Language : {{this.selectedQuestionData.language}} \n          <textarea v-model=\"answer\" placeholder=\"write code here..\" rows=\"10\"></textarea>\n          <button type=\"submit\">\n              Submit\n          </button>\n          </div>\n        </form>\n     </b-col>\n  </b-row>\n\n**/\nimport axios from 'axios';\n\nvar base64 = require('base-64');\n\nvar username = 'hello';\nvar password = 'hello';\nvar url_quizzes = \"http://127.0.0.1:8000/api/quizzes/\";\nvar url_post = \"http://127.0.0.1:8000/api/answerpapers/\";\nvar url_validate = \"http://127.0.0.1:8000/api/validate/\";\nvar url_questions = \"http://127.0.0.1:8000/api/questions/\";\nvar headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\nheaders.set('Accept', 'application/json');\nheaders.set('Content-Type', 'application/json');\nexport default {\n  name: 'TodoForm',\n  props: {\n    currentQuestion: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      questions: [],\n      postData: [],\n      selectedQuestionData: null,\n      selectedQuizData: null,\n      isSelectedQuestion: false,\n      isSelectedQuiz: false,\n      answer: \"\",\n      testdata: \"\",\n      quizzes: [],\n      course_id: \"\",\n      question_paper_id: \"\",\n      attempt_no: \"\",\n      course_question_paper: []\n    };\n  },\n  computed: {},\n  methods: {\n    selectedQuestion: function selectedQuestion(selectedQuestionData) {\n      this.selectedQuestionData = selectedQuestionData;\n      this.isSelectedQuestion = true;\n    },\n    selectedQuiz: function selectedQuiz(selectedQuizData, quiz_id) {\n      var _this = this;\n\n      this.selectedQuizData = selectedQuizData;\n      this.isSelectedQuiz = true;\n      fetch(url_quizzes.concat(quiz_id), {\n        method: 'get',\n        headers: headers\n      }).then(function (response) {\n        console.log(response);\n        return response.json();\n      }).then(function (jsonData) {\n        _this.questions = jsonData;\n        console.log(jsonData);\n\n        _this.$emit('submit', _this.questions);\n      });\n    },\n    onSubmit_2: function onSubmit_2() {\n      fetch(url_validate.concat(\"21\").concat(\"/\"), {\n        method: \"get\",\n        headers: headers\n      }).then(function (res) {\n        console.log(res);\n        return res.json();\n      }).then(function (jsonResponse) {\n        console.log(jsonResponse);\n      }).catch(function (err) {\n        err;\n      });\n    },\n    onSubmit_1: function onSubmit_1() {\n      fetch(url_validate.concat(\"5\").concat(\"/\").concat(\"5\").concat(\"/\"), {\n        method: \"post\",\n        headers: headers,\n        body: _JSON$stringify({\n          \"answer\": \"hello world!\"\n        })\n      }).then(function (res) {\n        console.log(res);\n        return res.json();\n      }).then(function (jsonResponse) {\n        console.log(jsonResponse);\n      }).catch(function (err) {\n        err;\n      });\n    },\n    selectCourse_Question_Paper: function selectCourse_Question_Paper(course_question_paper) {\n      var _this2 = this;\n\n      fetch(url_post, {\n        method: \"post\",\n        headers: headers,\n        //make sure to serialize your JSON body\n        body: _JSON$stringify({\n          \"question_paper\": course_question_paper.question_paper,\n          \"attempt_number\": course_question_paper.attempt_number + 1,\n          \"course\": course_question_paper.course\n        })\n      }).then(function (res) {\n        console.log(res);\n        return res.json();\n      }).then(function (jsonResponse) {\n        get_all_questions(jsonResponse.questions_order);\n        console.log(_this2.questions);\n      }).catch(function (err) {\n        err;\n      });\n      get_all_questions(question_order);\n      {\n        fetch(url_questions, {\n          method: 'get',\n          headers: headers\n        }).then(function (response) {\n          console.log(response);\n          return response.json();\n        }).then(function (jsonData) {\n          _this2.questions = []; // sort according to the question order\n\n          for (question_id in question_order) {\n            for (data in jsonData) {\n              if (data.id == question_id) {\n                _this2.questions.push(data);\n              }\n            }\n          }\n\n          console.log(_this2.questions);\n        });\n      }\n      /**\n      fetch(url_post, {\n            method: 'get',\n            headers: headers,\n          },)\n          .then((response) => {\n            console.log(response)\n            return response.json()\n          })\n          .then((jsonData) => {\n            //this.questions = jsonData \n            console.log(jsonData)\n            //this.$emit('submit', this.questions)\n          })\n      **/\n\n      /**\n                this.selectedQuestionData.solution = this.answer\n                //replace the answer for this question and let other questions unchanged\n                for(que in this.postData)\n                {\n                    if(que.summary === this.selectedQuestionData.summary)\n                    {\n                        que.solution = this.answer\n                    }\n               }\n              url, data=dict(uid=uid, json_data=json_data, user_dir=user_dir)\n              this.testdata = {\n                  'metadata': {\n                      'user_answer': this.answer,\n                      'language': 'python',\n                      'partial_grading': \"\"\n                  },\n                  'test_case_data': [\n                      {'test_case': 'assert 1==2',\n                       'test_case_type': 'standardtestcase',\n                       'weight': 0.0}\n                  ]\n              }\n        **/\n    }\n  },\n  created: function created() {\n    if (this.isSelected === true) {\n      this.currentQuestion = this.selectedQuestionData;\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    fetch(url_post, {\n      method: 'get',\n      headers: headers\n    }).then(function (response) {\n      console.log(response);\n      return response.json();\n    }).then(function (jsonData) {\n      console.log(jsonData);\n      _this3.course_question_paper = jsonData; //this.$emit('submit', this.quizzes)\n    });\n  }\n};",{"version":3,"sources":["TodoForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n  <b-container class=\"xyz\">\n    <b-row>\n            <ul v-for=\"(course_question_paper, index) in this.course_question_paper\" :key=\"index\" @click=\"selectCourse_Question_Paper(course_question_paper)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp; {{course_question_paper.course}} &nbsp;&nbsp;&nbsp;{{course_question_paper.question_paper}} </li> \n            </ul>\n    </b-row>\n      <b-row>\n        <form @submit.prevent=\"onSubmit_1\">\n              <button type=\"submit\">\n                  Submit again\n              </button>\n        </form>\n      </b-row>\n\n      <b-row>\n        <form @submit.prevent=\"onSubmit_2\">\n              <button type=\"submit\">\n                  Submit again and again\n              </button>\n        </form>\n      </b-row>\n  </b-container> \n\n<!--<div v-if=\"this.isSelected===true\"> {{this.selectedQuizData}} </div>-->\n</div>\n\n</template>\n\n<script>\n\n/**\n\n      <b-row>\n        <form @submit.prevent=\"onSubmit\">\n              <button type=\"submit\">\n                  Submit\n              </button>\n        </form>\n      </b-row>\n\n  <b-row>\n\n     <b-col v-if=\"this.isSelectedQuiz===true\">\n            <ul v-for=\"(q, index) in this.questions\" :key=\"index\" @click=\"selectedQuestion(q)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp; {{q}} </li> \n            </ul>\n     </b-col>\n\n     <b-col>\n        <form @submit.prevent=\"submit\">         \n          <div v-if=\"this.isSelectedQuestion===true\"> {{this.selectedQuestionData.summary}} </div>\n          <div v-if=\"this.isSelectedQuestion===true\" v-html=\"this.selectedQuestionData.description\"> </div>\n          <div v-if=\"this.isSelectedQuestion===true\">Language : {{this.selectedQuestionData.language}} \n          <textarea v-model=\"answer\" placeholder=\"write code here..\" rows=\"10\"></textarea>\n          <button type=\"submit\">\n              Submit\n          </button>\n          </div>\n        </form>\n     </b-col>\n  </b-row>\n\n**/\n\nimport axios from 'axios'\nlet base64 = require('base-64');\nlet username = 'hello';\nlet password = 'hello';\nlet url_quizzes = \"http://127.0.0.1:8000/api/quizzes/\"\nlet url_post = \"http://127.0.0.1:8000/api/answerpapers/\"\nlet url_validate = \"http://127.0.0.1:8000/api/validate/\"\nlet url_questions = \"http://127.0.0.1:8000/api/questions/\"\nlet headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\nheaders.set('Accept', 'application/json');\nheaders.set('Content-Type', 'application/json');\n\nexport default {\n  name: 'TodoForm',\n  props: {\n      currentQuestion: {\n      type: Object\n    }\n  },\n\n  data () {\n    return {\n      questions: [],\n      postData: [],\n      selectedQuestionData: null,\n      selectedQuizData:null,\n      isSelectedQuestion: false,\n      isSelectedQuiz:false,\n      answer: \"\",\n      testdata:\"\",\n      quizzes: [],\n      course_id: \"\",\n      question_paper_id: \"\",\n      attempt_no: \"\",\n      course_question_paper: [],\n    }\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n  selectedQuestion(selectedQuestionData){\n    this.selectedQuestionData = selectedQuestionData; \n    this.isSelectedQuestion = true;\n    },\n\n  selectedQuiz(selectedQuizData, quiz_id){\n    this.selectedQuizData = selectedQuizData; \n    this.isSelectedQuiz = true;\n\n    fetch(url_quizzes.concat(quiz_id), {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      this.questions = jsonData \n      console.log(jsonData)\n      this.$emit('submit', this.questions)\n    })\n  },\n\nonSubmit_2(){\n    fetch(url_validate.concat(\"21\").concat(\"/\"), {\n      method: \"get\",\n      headers: headers,\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n    })\n    .catch(err => {err});\n    },\n\nonSubmit_1(){\n    fetch(url_validate.concat(\"5\").concat(\"/\").concat(\"5\").concat(\"/\"), {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\"answer\":\"hello world!\"})\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n    })\n    .catch(err => {err});\n    },\n\n  selectCourse_Question_Paper(course_question_paper){\n\n    fetch(url_post, {\n      method: \"post\",\n      headers: headers,\n      //make sure to serialize your JSON body\n      body: JSON.stringify({\"question_paper\":course_question_paper.question_paper, \"attempt_number\":course_question_paper.attempt_number+1, \"course\":course_question_paper.course})\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              get_all_questions(jsonResponse.questions_order)\n              console.log(this.questions)\n    })\n    .catch(err => {err});\n\n\n  get_all_questions(question_order)\n    {\n          fetch(url_questions, {\n            method: 'get',\n            headers: headers,\n          },)\n         .then((response) => {\n            console.log(response)\n            return response.json()\n          })\n         .then((jsonData) => {\n            this.questions = [] \n            // sort according to the question order\n            for(question_id in question_order)\n            {\n              for(data in jsonData)\n              {\n                  if(data.id==question_id)\n                  {\n                      this.questions.push(data)\n                  }\n              }\n            }\n            console.log(this.questions)\n        })\n    }\n\n/**\nfetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      //this.questions = jsonData \n      console.log(jsonData)\n      //this.$emit('submit', this.questions)\n    })\n**/\n\n/**\n          this.selectedQuestionData.solution = this.answer\n          //replace the answer for this question and let other questions unchanged\n          for(que in this.postData)\n          {\n              if(que.summary === this.selectedQuestionData.summary)\n              {\n                  que.solution = this.answer\n              }\n         }\n        url, data=dict(uid=uid, json_data=json_data, user_dir=user_dir)\n        this.testdata = {\n            'metadata': {\n                'user_answer': this.answer,\n                'language': 'python',\n                'partial_grading': \"\"\n            },\n            'test_case_data': [\n                {'test_case': 'assert 1==2',\n                 'test_case_type': 'standardtestcase',\n                 'weight': 0.0}\n            ]\n        }\n  **/      \n      }\n\n\n\n  },\n  \n  created () {\n    if(this.isSelected===true)\n    {\n      this.currentQuestion = this.selectedQuestionData\n    }\n  },\n\n  mounted: function(){\n    fetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      console.log(jsonData)\n      this.course_question_paper = jsonData\n      //this.$emit('submit', this.quizzes)\n    })\n  }\n}\n</script>\n\n<style scoped>\n.todo-form {\n  display: flex;\n  margin: 24px;\n  margin-bottom: 32px;\n  justify-content: center;\n}\n.todo-item {\n  margin: 16px 0;\n  padding: 8px;\n  padding-left: 16px;\n  background-color: #42b983;\n  border-radius: 8px;\n  color: white;\n  justify: left;\n}\n.form-label {\n  margin-right: 16px;\n}\n\n\n.form-input {\n  display: block;\n  margin: 8px 0;\n  padding: 8px;\n  border-radius: 3px;\n  border: 0.5px solid rgba(0, 0, 0, 0.15);\n}\n\n.form-input:focus {\n  border: 0.5px solid #42b983;\n  outline: 0;\n  box-shadow: none;\n}\n\n.todo-form-btn {\n  /* clear button styling */\n  background: none;\n  outline: none;\n  border: none;\n  padding: 0;\n\n  /* custom styling */\n  background-color: white;\n  border: 1px solid #42b983;\n  margin-left: 8px;\n  margin-bottom: 8px;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: #42b983;\n  font-size: 1.2em;\n  /* font-weight: bold; */\n  align-self: flex-end;\n}\n\n.cancel-button {\n  font-size: 0.83em;\n}\n\ntodo-form-btn:active {\n  background-color: #42b983;\n  color: white;\n}\n</style>\n"],"sourceRoot":"src/components"}]}