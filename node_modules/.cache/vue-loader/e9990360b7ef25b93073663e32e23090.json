{"remainingRequest":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/components/TTodoForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/components/TTodoForm.vue","mtime":1561230134564},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nimport axios from 'axios'\nlet base64 = require('base-64');\nlet username = 'hello';\nlet password = 'hello';\nlet url_validate = \"http://127.0.0.1:8000/api/validate/\"\nlet url_courses = \"http://127.0.0.1:8000/api/get_courses/\"\nlet url_start_quiz = \"http://127.0.0.1:8000/api/start_quiz/\"\nlet headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\nheaders.set('Accept', 'application/json');\nheaders.set('Content-Type', 'application/json');\n\nexport default {\n  name: 'TTodoForm',\n  props: {\n      currentQuestion: {\n      type: Object\n    }\n  },\n\n  data () {\n    return {\n      questions: [],\n      courses: [],\n      selectedQuestionData: null,\n      isSelectedQuestion: false,\n      answer: \"\",\n      quizzes: [],\n      course_id: \"\",\n      attempt_no: \"\",\n      answer_paper_id: \"\",\n      user_id: \"\",\n      tornadoServerMessage: \"\",\n      isSubmitted: \"\",\n      isLearningModuleSelected:false,\n      isStartQuiz: false\n    }\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n\n  selectQuestion(selectedQuestionData){\n    this.selectedQuestionData = selectedQuestionData; \n    this.isSelectedQuestion = true;\n    },\n\n  submit(){\n      this.tornadoServerMessage = \"\"\n      this.isSubmitted = true\n      fetch(url_validate.concat(this.answer_paper_id).concat(\"/\").concat(this.selectedQuestionData.id).concat(\"/\"), {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\"answer\":this.answer})\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n              this.user_id = jsonResponse.uid\n              console.log(this.user_id)\n    })\n    .catch(err => {err});\n    },\n\n  get_learning_module_for_this_course(course)\n  {\n    this.learning_module = course.learning_module\n    //console.log(this.learning_module)\n    this.isLearningModuleSelected = true\n    this.quizzes = course.learning_module[0].learning_unit\n\n    console.log(this.quizzes)\n    this.course_id = course.id\n  },\n\n  startQuiz(quiz)\n  {\n    fetch(url_start_quiz.concat(this.course_id).concat(\"/\").concat(quiz.quiz.id).concat(\"/\"), {\n        method: \"get\",\n        headers: headers,\n      })\n      .then(res => {\n                console.log(res)\n                return res.json()\n      })\n      .then(jsonResponse => {\n                console.log(jsonResponse)\n                this.questions = jsonResponse.questions\n                console.log(\"hello\")\n                console.log(jsonResponse.questions)\n                this.isStartQuiz  = true\n                this.answer_paper_id = jsonResponse.id\n                this.attempt_no = jsonResponse.attempt_number\n                this.$emit('loading_questions', this.questions)\n      })\n      .catch(err => {err});\n  },\n\n  validate(){\n      fetch(url_validate.concat(this.user_id).concat(\"/\"), {\n        method: \"get\",\n        headers: headers,\n      })\n      .then(res => {\n                console.log(res)\n                return res.json()\n      })\n      .then(jsonResponse => {\n                console.log(jsonResponse)\n                this.tornadoServerMessage = JSON.parse(jsonResponse.result)\n      })\n      .catch(err => {err});\n      },\n},\n\n/**\nfetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      //this.questions = jsonData \n      console.log(jsonData)\n      //this.$emit('submit', this.questions)\n    })\n**/\n  \n  created () {\n    if(this.isSelected===true)\n    {\n      this.currentQuestion = this.selectedQuestionData\n    }\n  },\n\n  mounted: function(){\n    fetch(url_courses, {\n        method: \"get\",\n        headers: headers,\n      })\n      .then(res => {\n                console.log(res)\n                return res.json()\n      })\n      .then(jsonResponse => {\n                console.log(jsonResponse)\n                this.courses = jsonResponse\n                this.$emit('loading_courses', this.courses)\n      })\n      .catch(err => {err});\n  }\n}\n",{"version":3,"sources":["TTodoForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TTodoForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n  <b-container class=\"todo-form\">\n    <b-col v-if=\"this.isLearningModuleSelected===false\">\n            <ul v-for=\"(course, index) in this.courses\" :key=\"index\" @click=\"get_learning_module_for_this_course(course)\">\n            <li class=\"todo-item\">{{course.name}} </li> \n            </ul>\n    </b-col>\n\n    <b-col v-if=\"this.isLearningModuleSelected===true && this.isStartQuiz===false\">\n            Quizzes </br>\n            <ul v-for=\"(quiz, index) in this.quizzes\" :key=\"index\" @click=\"startQuiz(quiz)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp;{{quiz.quiz.description}} </li> \n            </ul>\n    </b-col>\n\n    <b-col v-if=\"this.isStartQuiz===true\">\n            Questions</br>\n            <ul v-for=\"(question, index) in this.questions\" :key=\"index\" @click=\"selectQuestion(question)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp;{{question.summary}} </li>  \n            </ul>\n    </b-col>\n    \n    <b-col>\n      <form @submit.prevent=\"submit\">         \n          <div v-if=\"this.isSelectedQuestion===true\"> {{this.selectedQuestionData.summary}} </div>\n          <div v-if=\"this.isSelectedQuestion===true\" v-html=\"this.selectedQuestionData.description\"> </div>\n          <div v-if=\"this.isSelectedQuestion===true\">Language : {{this.selectedQuestionData.language}} \n          <textarea v-model=\"answer\" placeholder=\"write code here..\" rows=\"20\" cols=\"20\"></textarea>\n          <button type=\"submit\">\n              Submit\n          </button>\n          </div>\n      </form>\n    </b-col>\n\n      <b-col v-if=\"this.isSubmitted===true\">\n        <form @submit.prevent=\"validate\">\n              <button type=\"submit\">\n                  Validate\n              </button>\n              <b-row v-if=\"this.tornadoServerMessage.success===true\">\n                Successful!!\n              </b-row>\n              <b-row v-if=\"this.tornadoServerMessage.success===false\">  \n                {{this.tornadoServerMessage.error[0].exception}} </br>\n                {{this.tornadoServerMessage.error[0].traceback}}\n              </b-row>\n        </form>\n      </b-col>\n  </b-container> \n\n</div>\n\n</template>\n\n<script>\n\n\nimport axios from 'axios'\nlet base64 = require('base-64');\nlet username = 'hello';\nlet password = 'hello';\nlet url_validate = \"http://127.0.0.1:8000/api/validate/\"\nlet url_courses = \"http://127.0.0.1:8000/api/get_courses/\"\nlet url_start_quiz = \"http://127.0.0.1:8000/api/start_quiz/\"\nlet headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\nheaders.set('Accept', 'application/json');\nheaders.set('Content-Type', 'application/json');\n\nexport default {\n  name: 'TTodoForm',\n  props: {\n      currentQuestion: {\n      type: Object\n    }\n  },\n\n  data () {\n    return {\n      questions: [],\n      courses: [],\n      selectedQuestionData: null,\n      isSelectedQuestion: false,\n      answer: \"\",\n      quizzes: [],\n      course_id: \"\",\n      attempt_no: \"\",\n      answer_paper_id: \"\",\n      user_id: \"\",\n      tornadoServerMessage: \"\",\n      isSubmitted: \"\",\n      isLearningModuleSelected:false,\n      isStartQuiz: false\n    }\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n\n  selectQuestion(selectedQuestionData){\n    this.selectedQuestionData = selectedQuestionData; \n    this.isSelectedQuestion = true;\n    },\n\n  submit(){\n      this.tornadoServerMessage = \"\"\n      this.isSubmitted = true\n      fetch(url_validate.concat(this.answer_paper_id).concat(\"/\").concat(this.selectedQuestionData.id).concat(\"/\"), {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\"answer\":this.answer})\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n              this.user_id = jsonResponse.uid\n              console.log(this.user_id)\n    })\n    .catch(err => {err});\n    },\n\n  get_learning_module_for_this_course(course)\n  {\n    this.learning_module = course.learning_module\n    //console.log(this.learning_module)\n    this.isLearningModuleSelected = true\n    this.quizzes = course.learning_module[0].learning_unit\n\n    console.log(this.quizzes)\n    this.course_id = course.id\n  },\n\n  startQuiz(quiz)\n  {\n    fetch(url_start_quiz.concat(this.course_id).concat(\"/\").concat(quiz.quiz.id).concat(\"/\"), {\n        method: \"get\",\n        headers: headers,\n      })\n      .then(res => {\n                console.log(res)\n                return res.json()\n      })\n      .then(jsonResponse => {\n                console.log(jsonResponse)\n                this.questions = jsonResponse.questions\n                console.log(\"hello\")\n                console.log(jsonResponse.questions)\n                this.isStartQuiz  = true\n                this.answer_paper_id = jsonResponse.id\n                this.attempt_no = jsonResponse.attempt_number\n                this.$emit('loading_questions', this.questions)\n      })\n      .catch(err => {err});\n  },\n\n  validate(){\n      fetch(url_validate.concat(this.user_id).concat(\"/\"), {\n        method: \"get\",\n        headers: headers,\n      })\n      .then(res => {\n                console.log(res)\n                return res.json()\n      })\n      .then(jsonResponse => {\n                console.log(jsonResponse)\n                this.tornadoServerMessage = JSON.parse(jsonResponse.result)\n      })\n      .catch(err => {err});\n      },\n},\n\n/**\nfetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      //this.questions = jsonData \n      console.log(jsonData)\n      //this.$emit('submit', this.questions)\n    })\n**/\n  \n  created () {\n    if(this.isSelected===true)\n    {\n      this.currentQuestion = this.selectedQuestionData\n    }\n  },\n\n  mounted: function(){\n    fetch(url_courses, {\n        method: \"get\",\n        headers: headers,\n      })\n      .then(res => {\n                console.log(res)\n                return res.json()\n      })\n      .then(jsonResponse => {\n                console.log(jsonResponse)\n                this.courses = jsonResponse\n                this.$emit('loading_courses', this.courses)\n      })\n      .catch(err => {err});\n  }\n}\n</script>\n\n<style scoped>\n.todo-form {\n  display: flex;\n  margin: 24px;\n  margin-bottom: 32px;\n  justify-content: center;\n}\n.todo-item {\n  margin: 16px 0;\n  padding: 8px;\n  padding-left: 16px;\n  background-color: #42b983;\n  border-radius: 8px;\n  color: white;\n  justify: left;\n}\n\n</style>\n"]}]}