{"remainingRequest":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/babel-loader/lib/index.js!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/components/TodoForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/src/components/TodoForm.vue","mtime":1561026975951},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/home/himanshu/Desktop/RA_Work/FOSSEE/prabhu_sir/vue/OfflineTest/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\n\nvar base64 = require('base-64');\n\nvar username = 'hello';\nvar password = 'hello';\nvar url_quizzes = \"http://127.0.0.1:8000/api/quizzes/\";\nvar url_post = \"http://127.0.0.1:8000/api/answerpapers/\";\nvar url_validate = \"http://127.0.0.1:8000/api/validate/\";\nvar url_questions = \"http://127.0.0.1:8000/api/questions/\";\nvar headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\nheaders.set('Accept', 'application/json');\nheaders.set('Content-Type', 'application/json');\nexport default {\n  name: 'TodoForm',\n  props: {\n    currentQuestion: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      questions: [],\n      postData: [],\n      selectedQuestionData: null,\n      selectedQuizData: null,\n      isSelectedQuestion: false,\n      isSelectedQuiz: false,\n      answer: \"\",\n      testdata: \"\",\n      quizzes: [],\n      course_id: \"\",\n      question_paper_id: \"\",\n      attempt_no: \"\",\n      course_question_paper: [],\n      answer_paper_id: \"\",\n      isSelectedQuestionPaper: false,\n      user_id: \"\",\n      tornadoServerMessage: \"\",\n      isSubmitted: \"\"\n    };\n  },\n  computed: {},\n  methods: {\n    selectQuestion: function selectQuestion(selectedQuestionData) {\n      this.selectedQuestionData = selectedQuestionData;\n      this.isSelectedQuestion = true;\n    },\n    submit: function submit() {\n      var _this = this;\n\n      this.tornadoServerMessage = \"\";\n      this.isSubmitted = true;\n      fetch(url_validate.concat(this.answer_paper_id).concat(\"/\").concat(this.selectedQuestionData.id).concat(\"/\"), {\n        method: \"post\",\n        headers: headers,\n        body: _JSON$stringify({\n          \"answer\": this.answer\n        })\n      }).then(function (res) {\n        console.log(res);\n        return res.json();\n      }).then(function (jsonResponse) {\n        console.log(jsonResponse);\n        _this.user_id = jsonResponse.uid;\n        console.log(_this.user_id);\n      }).catch(function (err) {\n        err;\n      });\n    },\n    validate: function validate() {\n      var _this2 = this;\n\n      fetch(url_validate.concat(this.user_id).concat(\"/\"), {\n        method: \"get\",\n        headers: headers\n      }).then(function (res) {\n        console.log(res);\n        return res.json();\n      }).then(function (jsonResponse) {\n        console.log(jsonResponse);\n        _this2.tornadoServerMessage = jsonResponse;\n      }).catch(function (err) {\n        err;\n      });\n    },\n    onSubmit_1: function onSubmit_1() {\n      fetch(url_validate.concat(\"5\").concat(\"/\").concat(\"5\").concat(\"/\"), {\n        method: \"post\",\n        headers: headers,\n        body: _JSON$stringify({\n          \"answer\": this.answer\n        })\n      }).then(function (res) {\n        console.log(res);\n        return res.json();\n      }).then(function (jsonResponse) {\n        console.log(jsonResponse);\n      }).catch(function (err) {\n        err;\n      });\n    },\n    selectCourse_Question_Paper: function selectCourse_Question_Paper(course_question_paper) {\n      var _this3 = this;\n\n      this.answer_paper_id = course_question_paper.id; //console.log(course_question_paper.id)\n      //console.log(course_question_paper.questions_order)\n\n      this.isSelectedQuestionPaper = true;\n      this.questions = [];\n      fetch(url_questions, {\n        method: 'get',\n        headers: headers\n      }).then(function (response) {\n        console.log(response);\n        return response.json();\n      }).then(function (jsonData) {\n        //console.log(jsonData)\n        _this3.questions = jsonData; // sort according to the question order\n\n        for (question_id in course_question_paper.questions_order) {\n          for (data in jsonData) {\n            console.log(question_id);\n            console.log(data.id);\n\n            if (data.id === question_id) {\n              _this3.questions.push(data);\n            }\n          }\n        }\n\n        console.log(_this3.questions);\n        console.log(jsonData);\n\n        _this3.$emit('loading_questions', jsonData);\n      });\n    }\n  },\n\n  /**\n  fetch(url_post, {\n        method: 'get',\n        headers: headers,\n      },)\n      .then((response) => {\n        console.log(response)\n        return response.json()\n      })\n      .then((jsonData) => {\n        //this.questions = jsonData \n        console.log(jsonData)\n        //this.$emit('submit', this.questions)\n      })\n  **/\n  created: function created() {\n    if (this.isSelected === true) {\n      this.currentQuestion = this.selectedQuestionData;\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    fetch(url_post, {\n      method: 'get',\n      headers: headers\n    }).then(function (response) {\n      console.log(response);\n      return response.json();\n    }).then(function (jsonData) {\n      console.log(jsonData);\n      _this4.course_question_paper = jsonData;\n\n      _this4.$emit('loading_course_question_paper', _this4.course_question_paper);\n    });\n  }\n};",{"version":3,"sources":["TodoForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n  <b-container class=\"todo-form\">\n    <b-row>\n            <ul v-for=\"(course_question_paper, index) in this.course_question_paper\" :key=\"index\" @click=\"selectCourse_Question_Paper(course_question_paper)\">\n            <li class=\"todo-item\">{{course_question_paper.course}} &nbsp;&nbsp;&nbsp;{{course_question_paper.question_paper}} </li> \n            </ul>\n    </b-row>\n\n    <b-row v-if=\"this.isSelectedQuestionPaper===true\">\n            Questions</br>\n            <ul v-for=\"(question, index) in this.questions\" :key=\"index\" @click=\"selectQuestion(question)\">\n            <li class=\"todo-item\"> {{index+1}} &nbsp;&nbsp;&nbsp;{{question.summary}} </li> \n            </ul>\n    </b-row>\n    \n    <b-row>\n      <form @submit.prevent=\"submit\">         \n          <div v-if=\"this.isSelectedQuestion===true\"> {{this.selectedQuestionData.summary}} </div>\n          <div v-if=\"this.isSelectedQuestion===true\" v-html=\"this.selectedQuestionData.description\"> </div>\n          <div v-if=\"this.isSelectedQuestion===true\">Language : {{this.selectedQuestionData.language}} \n          <textarea v-model=\"answer\" placeholder=\"write code here..\" rows=\"10\"></textarea>\n          <button type=\"submit\">\n              Submit\n          </button>\n          </div>\n      </form>\n    </b-row>\n\n      <b-row v-if=\"this.isSubmitted===true\">\n        <form @submit.prevent=\"validate\">\n              <button type=\"submit\">\n                  Validate\n              </button>\n              {{this.tornadoServerMessage}}\n        </form>\n      </b-row>\n  </b-container> \n\n<!--<div v-if=\"this.isSelected===true\"> {{this.selectedQuizData}} </div>-->\n</div>\n\n</template>\n\n<script>\n\n\nimport axios from 'axios'\nlet base64 = require('base-64');\nlet username = 'hello';\nlet password = 'hello';\nlet url_quizzes = \"http://127.0.0.1:8000/api/quizzes/\"\nlet url_post = \"http://127.0.0.1:8000/api/answerpapers/\"\nlet url_validate = \"http://127.0.0.1:8000/api/validate/\"\nlet url_questions = \"http://127.0.0.1:8000/api/questions/\"\nlet headers = new Headers();\nheaders.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\nheaders.set('Accept', 'application/json');\nheaders.set('Content-Type', 'application/json');\n\nexport default {\n  name: 'TodoForm',\n  props: {\n      currentQuestion: {\n      type: Object\n    }\n  },\n\n  data () {\n    return {\n      questions: [],\n      postData: [],\n      selectedQuestionData: null,\n      selectedQuizData: null,\n      isSelectedQuestion: false,\n      isSelectedQuiz: false,\n      answer: \"\",\n      testdata:\"\",\n      quizzes: [],\n      course_id: \"\",\n      question_paper_id: \"\",\n      attempt_no: \"\",\n      course_question_paper: [],\n      answer_paper_id: \"\",\n      isSelectedQuestionPaper: false,\n      user_id: \"\",\n      tornadoServerMessage: \"\",\n      isSubmitted: \"\",\n    }\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n\n  selectQuestion(selectedQuestionData){\n    this.selectedQuestionData = selectedQuestionData; \n    this.isSelectedQuestion = true;\n    },\n\n  submit(){\n      this.tornadoServerMessage = \"\"\n      this.isSubmitted = true\n      fetch(url_validate.concat(this.answer_paper_id).concat(\"/\").concat(this.selectedQuestionData.id).concat(\"/\"), {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\"answer\":this.answer})\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n              this.user_id = jsonResponse.uid\n              console.log(this.user_id)\n    })\n    .catch(err => {err});\n    },\n\n\nvalidate(){\n    fetch(url_validate.concat(this.user_id).concat(\"/\"), {\n      method: \"get\",\n      headers: headers,\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n              this.tornadoServerMessage = jsonResponse\n    })\n    .catch(err => {err});\n    },\n\nonSubmit_1(){\n    fetch(url_validate.concat(\"5\").concat(\"/\").concat(\"5\").concat(\"/\"), {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\"answer\":this.answer})\n    })\n    .then(res => {\n              console.log(res)\n              return res.json()\n    })\n    .then(jsonResponse => {\n              console.log(jsonResponse)\n    })\n    .catch(err => {err});\n    },\n\n  selectCourse_Question_Paper(course_question_paper){\n        this.answer_paper_id = course_question_paper.id\n        //console.log(course_question_paper.id)\n        //console.log(course_question_paper.questions_order)\n        this.isSelectedQuestionPaper = true\n        this.questions = []\n        fetch(url_questions, {\n            method: 'get',\n            headers: headers,\n          },)\n         .then((response) => {\n            console.log(response)\n            return response.json()\n          })\n         .then((jsonData) => {\n            //console.log(jsonData)\n            this.questions = jsonData\n            // sort according to the question order\n            for(question_id in course_question_paper.questions_order)\n            {\n              for(data in jsonData)\n              {   \n                  console.log(question_id)\n                  console.log(data.id)\n                  if(data.id===question_id)\n                  {\n                      this.questions.push(data)\n                  }\n              }\n            }\n            console.log(this.questions)\n            console.log(jsonData)\n            this.$emit('loading_questions', jsonData)\n        })\n    }\n  },\n\n\n/**\nfetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      //this.questions = jsonData \n      console.log(jsonData)\n      //this.$emit('submit', this.questions)\n    })\n**/\n  \n  created () {\n    if(this.isSelected===true)\n    {\n      this.currentQuestion = this.selectedQuestionData\n    }\n  },\n\n  mounted: function(){\n    fetch(url_post, {\n      method: 'get',\n      headers: headers,\n    },)\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((jsonData) => {\n      console.log(jsonData)\n      this.course_question_paper = jsonData\n      this.$emit('loading_course_question_paper', this.course_question_paper)\n    })\n  }\n}\n</script>\n\n<style scoped>\n.todo-form {\n  display: flex;\n  margin: 24px;\n  margin-bottom: 32px;\n  justify-content: center;\n}\n.todo-item {\n  margin: 16px 0;\n  padding: 8px;\n  padding-left: 16px;\n  background-color: #42b983;\n  border-radius: 8px;\n  color: white;\n  justify: left;\n}\n.form-label {\n  margin-right: 16px;\n}\n\n\n.form-input {\n  display: block;\n  margin: 8px 0;\n  padding: 8px;\n  border-radius: 3px;\n  border: 0.5px solid rgba(0, 0, 0, 0.15);\n}\n\n.form-input:focus {\n  border: 0.5px solid #42b983;\n  outline: 0;\n  box-shadow: none;\n}\n\n.todo-form-btn {\n  /* clear button styling */\n  background: none;\n  outline: none;\n  border: none;\n  padding: 0;\n\n  /* custom styling */\n  background-color: white;\n  border: 1px solid #42b983;\n  margin-left: 8px;\n  margin-bottom: 8px;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: #42b983;\n  font-size: 1.2em;\n  /* font-weight: bold; */\n  align-self: flex-end;\n}\n\n.cancel-button {\n  font-size: 0.83em;\n}\n\ntodo-form-btn:active {\n  background-color: #42b983;\n  color: white;\n}\n</style>\n"],"sourceRoot":"src/components"}]}